package jormCore;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

public class JormApplication {

	private static JormApplication application;
	
	private List<Class<? extends PersistentObject>> typeList;
	
	
	private JormApplication()
	{
		typeList = new ArrayList<>();
	}
	
	public static JormApplication getApplication()
	{
		if(application == null)
			application = new JormApplication();
			
		return application;
	}
	
	public void initDatabase()
	{
		
	}
	

	public static void registerType(Class<? extends PersistentObject> type)
	{
		if(!_typeList.contains(type))
			_typeList.add(type);
	}
	
	public static void registerTypes(List<Class<? extends PersistentObject>> types)
	{
		if(types != null)
		{
			for(Class<? extends PersistentObject> type : types)
			{
				registerType(type);
			}
		}
	}
	
	public static List<Class<? extends PersistentObject>> getTypeList()
	{
		return _typeList;
	}
	
	public static List<Field> getPersistentProperties(Class<?> classToSave)
    {
        List<Field> members = new ArrayList<Field>();

        while(classToSave != null)
        {
            for (Field field : classToSave.getDeclaredFields()) 
            {
                if(!field.isAnnotationPresent(jormCore.Annotaions.NonPersistent.class))
                {
                    field.setAccessible(true);
                    members.add(field);
                }
            }

            classToSave = classToSave.getSuperclass();
        }

        return members;
    }
	
}
