package jormCore;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import jormCore.Tracing.LogLevel;

public class JormApplication {

	private static JormApplication application;
	private LogLevel level;
	private String connectionSting;
	
	
	private List<Class<? extends PersistentObject>> typeList;
	
	
	private JormApplication()
	{
		typeList = new ArrayList<>();
	}
	
	public static JormApplication getApplication()
	{
		if(application == null)
			application = new JormApplication();
			
		return application;
	}
	
	public void initDatabase()
	{
		
	}
	
	
	
	
	

    /*Type Handling*/
	public void registerType(Class<? extends PersistentObject> type)
	{
		if(!typeList.contains(type))
			typeList.add(type);
	}
	
	public void registerTypes(List<Class<? extends PersistentObject>> types)
	{
		if(types != null)
		{
			for(Class<? extends PersistentObject> type : types)
			{
				registerType(type);
			}
		}
	}
	
	public List<Class<? extends PersistentObject>> getTypeList()
	{
		return typeList;
	}
	
//	public static List<Field> getPersistentProperties(Class<?> classToSave)
//    {
//        List<Field> members = new ArrayList<Field>();
//
//        while(classToSave != null)
//        {
//            for (Field field : classToSave.getDeclaredFields()) 
//            {
//                if(!field.isAnnotationPresent(jormCore.Annotaions.NonPersistent.class))
//                {
//                    field.setAccessible(true);
//                    members.add(field);
//                }
//            }
//
//            classToSave = classToSave.getSuperclass();
//        }
//
//        return members;
//    }
	
}
